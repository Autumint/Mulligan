[manifest]
version = "1.0.0"
dump_lua = true
priority = 99999999

[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''[local]* *viewed_deck'''
position = "at"
payload = '''G.viewed_deck'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
  local ordered_names, viewed_deck = {}, 1
  for k, v in ipairs(G.P_CENTER_POOLS.Back) do
    ordered_names[#ordered_names+1] = v.name
    if v.name == G.GAME.viewed_back.name then viewed_deck = k end
  end
'''
position = "at"
payload = '''
  viewed_deck = viewed_deck or G.PROFILES[G.SETTINGS.profile].MEMORY.deck_view or 1
  local ordered_names = {}
  if otype(viewed_deck) == "string" then
    viewed_deck = 1
    for k, v in ipairs(get_decks_centers()) do
      ordered_names[#ordered_names+1] = v.name
      if v.name == G.GAME.viewed_back.name then viewed_deck = k end
    end
  end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
function G.UIDEF.run_setup_option(type)
'''
position = "at"
payload = '''
function G.UIDEF.run_setup_option(ttype)
local otype = type
local type = ttype
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
 G.GAME.viewed_back = Back(get_deck_from_name(G.PROFILES[G.SETTINGS.profile].MEMORY.deck))
'''
position = "at"
payload = '''
 G.GAME.viewed_back = get_viewed_back()
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
create_option_cycle({options =  ordered_names, opt_callback = 'change_viewed_back', current_option = viewed_deck, colour = G.C.RED, w = 3.5, mid =
'''
position = "at"
payload = '''
create_option_cycle({options =  G.FUNCS.get_decks_tainted(), opt_callback = 'change_viewed_back', current_option = viewed_deck, colour = G.C.RED, w = 3.5, mid =
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
local _can_continue = G.MAIN_MENU_UI and G.FUNCS.can_continue({config = {func = true}})
'''
position = "at"
payload = '''
local _can_continue = G.MAIN_MENU_UI and G.FUNCS.can_continue({config = {func = true}})
if G.FORCE_NEW_RUN then _can_continue = false end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "back.lua"
pattern = '''
if G.localization.descriptions.Back[key_override or back_config.key].unlock_parsed then
'''
position = "at"
payload = '''
if (G.localization.descriptions.Back[key_override or (back_config or {}).key] or {}).unlock_parsed then
'''
match_indent = true

[[patches]]
[patches.regex]
target = '''=[SMODS galdur "galdur.lua"]'''
pattern = "G\\.P_CENTER_POOLS\\.Back"
position = 'at'
line_prepend = '$indent'
payload = '''
get_decks_centers()
'''
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
            if G.FILE_HANDLER.progress then
                G.SAVE_MANAGER.channel:push({
                    type = 'save_progress',
                    save_progress = G.ARGS.save_progress
                  })
            elseif G.FILE_HANDLER.settings then
                G.SAVE_MANAGER.channel:push({
                    type = 'save_settings',
                    save_settings = G.ARGS.save_settings,
                    profile_num = G.SETTINGS.profile,
                    save_profile = G.PROFILES[G.SETTINGS.profile]
                  })
            end
'''
position = "at"
payload = '''
pcall(function()
            if G.FILE_HANDLER.progress then
                G.SAVE_MANAGER.channel:push({
                    type = 'save_progress',
                    save_progress = G.ARGS.save_progress
                  })
            elseif G.FILE_HANDLER.settings then
                G.SAVE_MANAGER.channel:push({
                    type = 'save_settings',
                    save_settings = G.ARGS.save_settings,
                    profile_num = G.SETTINGS.profile,
                    save_profile = G.PROFILES[G.SETTINGS.profile]
                  })
            end
end)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
    elseif blindname == 'Small Blind' or blindname == 'Big Blind' or blindname == '' then
        ease_background_colour{new_colour = G.C.BLIND['Small'], contrast = 1}
    else
'''
position = "at"
payload = '''
    elseif blindname == 'Small Blind' or blindname == 'Big Blind' or blindname == '' then
        ease_background_colour{new_colour = TDECKS.get_bg_colour(), contrast = 1}
    else
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
{n=G.UIT.T, config={text = localize('b_skip_blind'), scale = 0.4, colour = G.C.UI.TEXT_INACTIVE}}
'''
position = "at"
payload = '''
{n=G.UIT.T, config={text = G.GAME.modifiers.tainted_anaglyph and localize('Select', 'blind_states') or localize('b_skip_blind'), scale = 0.4, colour = G.C.UI.TEXT_INACTIVE}}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
G.STATE = G.STATES.SHOP
'''
position = "at"
payload = '''
G.STATE = G.GAME.modifiers.tainted_yellow and G.STATES.BLIND_SELECT or G.STATES.SHOP
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
if math.abs(G.shop.T.y - G.shop.VT.y) < 3 then
'''
position = "at"
payload = '''
if G.shop and math.abs(G.shop.T.y - G.shop.VT.y) < 3 then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
if math.abs(G.shop.T.y - G.shop.VT.y) < 3 then
'''
position = "at"
payload = '''
if not G.shop then
          G.shop = UIBox{
            definition = G.UIDEF.shop(),
            config = {align='tmi', offset = {x=0,y=G.ROOM.T.y+11},major = G.hand, bond = 'Weak'}
        }
end
if G.shop and math.abs(G.shop.T.y - G.shop.VT.y) < 3 then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "-- TARGET: add your own CardAreas for joker evaluation"
position = 'before'
match_indent = true
payload = '''
if G.pactive_area then table.insert(t, G.pactive_area) end
'''
